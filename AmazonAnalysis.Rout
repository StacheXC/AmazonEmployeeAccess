
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(vroom)
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──
✔ broom        1.0.7     ✔ recipes      1.1.0
✔ dials        1.3.0     ✔ rsample      1.2.1
✔ dplyr        1.1.4     ✔ tibble       3.2.1
✔ ggplot2      3.5.1     ✔ tidyr        1.3.1
✔ infer        1.0.7     ✔ tune         1.2.1
✔ modeldata    1.4.0     ✔ workflows    1.1.4
✔ parsnip      1.2.1     ✔ workflowsets 1.1.0
✔ purrr        1.0.2     ✔ yardstick    1.3.1
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard()  masks scales::discard()
✖ dplyr::filter()   masks stats::filter()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec()
✖ recipes::step()   masks stats::step()
• Search for functions across packages at https://www.tidymodels.org/find/
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.5
✔ lubridate 1.9.3     ✔ stringr   1.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ readr::col_character()   masks vroom::col_character()
✖ readr::col_date()        masks vroom::col_date()
✖ readr::col_datetime()    masks vroom::col_datetime()
✖ readr::col_double()      masks vroom::col_double()
✖ readr::col_factor()      masks scales::col_factor(), vroom::col_factor()
✖ readr::col_guess()       masks vroom::col_guess()
✖ readr::col_integer()     masks vroom::col_integer()
✖ readr::col_logical()     masks vroom::col_logical()
✖ readr::col_number()      masks vroom::col_number()
✖ readr::col_skip()        masks vroom::col_skip()
✖ readr::col_time()        masks vroom::col_time()
✖ readr::cols()            masks vroom::cols()
✖ readr::date_names_lang() masks vroom::date_names_lang()
✖ readr::default_locale()  masks vroom::default_locale()
✖ purrr::discard()         masks scales::discard()
✖ dplyr::filter()          masks stats::filter()
✖ stringr::fixed()         masks recipes::fixed()
✖ readr::fwf_cols()        masks vroom::fwf_cols()
✖ readr::fwf_empty()       masks vroom::fwf_empty()
✖ readr::fwf_positions()   masks vroom::fwf_positions()
✖ readr::fwf_widths()      masks vroom::fwf_widths()
✖ dplyr::lag()             masks stats::lag()
✖ readr::locale()          masks vroom::locale()
✖ readr::output_column()   masks vroom::output_column()
✖ readr::problems()        masks vroom::problems()
✖ readr::spec()            masks yardstick::spec(), vroom::spec()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(embed)
> 
> train = vroom("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test = vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> train$ACTION = as.factor(train$ACTION)
> 
> my_recipe = recipe(ACTION ~ ., data = train) |> 
+   step_mutate_at(all_numeric_predictors(), fn = factor) |> 
+   step_other(all_nominal_predictors(), threshold = 0.1) |> 
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) |> 
+   step_zv() |> 
+   step_normalize(all_numeric_predictors())
> 
> #prep = prep(my_recipe)
> #baked = bake(prep, new_data = train)
> #baked
> 
> # Penalized Regression
> logRegModel = logistic_reg(mixture = tune(), penalty = tune()) |> 
+   set_engine("glmnet")
> 
> wf = workflow() |> 
+   add_recipe(my_recipe) |> 
+   add_model(logRegModel)
> 
> tuning_grid = grid_regular(penalty(),
+                            mixture(),
+                            levels = 5)
> 
> folds = vfold_cv(train, v = 10, repeats = 1)
> 
> CV_results = wf |> 
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(roc_auc))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
→ A | warning: !  The following columns have zero variance so scaling cannot be used: MGR_ID
                 and ROLE_FAMILY.
               ℹ Consider using ?step_zv (`?recipes::step_zv()`) to remove those columns
                 before normalizing.
There were issues with some computations   A: x1
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
→ B | warning: !  The following columns have zero variance so scaling cannot be used: MGR_ID,
                 ROLE_DEPTNAME, and ROLE_FAMILY.
               ℹ Consider using ?step_zv (`?recipes::step_zv()`) to remove those columns
                 before normalizing.
There were issues with some computations   A: x1There were issues with some computations   A: x1   B: x1
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
There were issues with some computations   A: x1   B: x2
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
There were issues with some computations   A: x1   B: x3
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
→ C | warning: !  The following columns have zero variance so scaling cannot be used: MGR_ID
                 and ROLE_DEPTNAME.
               ℹ Consider using ?step_zv (`?recipes::step_zv()`) to remove those columns
                 before normalizing.
There were issues with some computations   A: x1   B: x3There were issues with some computations   A: x1   B: x3   C: x1
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
There were issues with some computations   A: x1   B: x4   C: x1
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
There were issues with some computations   A: x1   B: x4   C: x2
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
There were issues with some computations   A: x1   B: x4   C: x3
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
There were issues with some computations   A: x1   B: x5   C: x3
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
There were issues with some computations   A: x2   B: x5   C: x3
There were issues with some computations   A: x2   B: x5   C: x3

> 
> bestTune = CV_results |> 
+   select_best()
Warning message:
In select_best(CV_results) :
  No value of `metric` was given; "roc_auc" will be used.
> 
> final_wf = wf |> 
+   finalize_workflow(bestTune) |> 
+   fit(data = train)
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
Warning message:
!  The following columns have zero variance so scaling cannot be used: MGR_ID
  and ROLE_DEPTNAME.
ℹ Consider using ?step_zv (`?recipes::step_zv()`) to remove those columns
  before normalizing. 
> 
> predictions = predict(final_wf,
+                       new_data = test,
+                       type = "prob")
> 
> #predictions
> 
> kaggle_submission = bind_cols(test["id"], predictions[".pred_1"]) |> 
+   rename("Id" = id, "Action" = .pred_1)
> #kaggle_submission
> 
> vroom_write(x = kaggle_submission, 
+             file = "logregpred2.csv",
+             delim = ",")
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
133.995   1.410 135.102 
